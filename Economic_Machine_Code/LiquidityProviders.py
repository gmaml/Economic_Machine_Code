# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_liquidityproviders.ipynb.

# %% auto 0
__all__ = ['AccountEntry', 'Agent', 'EconomicAgent', 'CentralBank', 'Treasury', 'CommercialBanks', 'Private']

# %% ../nbs/00_liquidityproviders.ipynb 4
class AccountEntry(BaseModel):
    asset: Dict[str, float]
    liability: Dict[str, float]

class Agent():
    def __init__(self,name:str):
        self.name = name   
    def __str__(self):
        return f'{self.name}'
    __repr__=__str__

class EconomicAgent(Agent):
    def __init__(self, name: str, allowed_assets: List[str], allowed_liabilities: List[str], entry: AccountEntry = AccountEntry(asset={}, liability={})):
        super().__init__(name)
        self.asset = {k: 0.0 for k in allowed_assets}
        self.liability = {k: 0.0 for k in allowed_liabilities}

        input_data = {'asset': entry.asset, 'liability': entry.liability}
        validated_data = AccountEntry(**input_data)

        if not set(validated_data.asset.keys()).issubset(set(allowed_assets)):
            raise ValueError(f'Invalid asset item. The valid items are {allowed_assets}.')
        if not set(validated_data.liability.keys()).issubset(set(allowed_liabilities)):
            raise ValueError('Invalid liability item.')
        if sum(validated_data.asset.values()) != sum(validated_data.liability.values()):
            raise ValueError('The sum of asset must be equal to the sum of liability!')

        for k, v in validated_data.asset.items():
            self.asset[k] = v

        for k, v in validated_data.liability.items():
            self.liability[k] = v

    @property
    def total_asset(self):
        return sum(self.asset.values())

    @property
    def total_liability(self):
        return sum(self.liability.values())
    
    def is_liquidity_provider(self,allowed_liabilities:List[str])->bool:
        return ('Treasury' in allowed_liabilities) or ('Deposit' in allowed_liabilities) or ('Bank Reserves' in allowed_liabilities) 
        
        

    def __str__(self):
        return f'{self.name}: total asset/liability is {self.total_asset}'

    __repr__ = __str__


class CentralBank(EconomicAgent):
    allowed_assets = ['Treasury', 'CB Loan']
    allowed_liabilities = ['Bank Reserves', 'Cash', 'TGA']

    def __init__(self, entry: AccountEntry = AccountEntry(asset={}, liability={})):
        super().__init__('Central Bank', CentralBank.allowed_assets, CentralBank.allowed_liabilities, entry)
        
    def treasury_tranactions(self, counterparty: EconomicAgent, transaction: str = 'buy', amount: float = 0.0) -> None:
        if isinstance(counterparty, CentralBank):
            print('Central bank cannot trade with itself!')
        elif isinstance(counterparty, Treasury):
            if transaction == 'sell':
                raise ValueError('Central bank cannot sell treasuries to Treasury!')
            elif transaction == 'buy':
                self.asset['Treasury'] += amount
                self.liability['TGA'] += amount
                counterparty.asset['TGA'] += amount
                counterparty.liability['Treasury'] += amount
            else:
                raise ValueError('Transaction has to be buy or sell!')
        else:
            pass


class Treasury(EconomicAgent):
    allowed_assets = ['TGA']
    allowed_liabilities = ['Treasury']

    def __init__(self, entry: AccountEntry = AccountEntry(asset={}, liability={})):
        super().__init__('Treasury', Treasury.allowed_assets, Treasury.allowed_liabilities, entry)

    def treasury_tranactions(self, counterparty: EconomicAgent, transaction: str = 'sell', amount: float = 0.0) -> None:
        if isinstance(counterparty, Treasury):
            print('Treasury cannot trade with itself!')
        elif isinstance(counterparty, CentralBank):
            if transaction == 'buy':
                raise ValueError('Treasury cannot buy treasuries from central bank!')
            elif transaction == 'sell':
                self.asset['TGA'] += amount
                self.liability['Treasury'] += amount
                counterparty.liability['TGA'] += amount
                counterparty.asset['Treasury'] +=amount
            else:
                raise ValueError('Transaction has to be buy or sell!')
        else:
            pass
        
class CommercialBanks(EconomicAgent):
    allowed_assets = ['Treasury','Loan','Bank Reserves']
    allowed_liabilities = ['Deposit']

    def __init__(self, entry: AccountEntry = AccountEntry(asset={}, liability={})):
        super().__init__('CommercialBanks', CommercialBanks.allowed_assets, CommercialBanks.allowed_liabilities, entry)

class Private(EconomicAgent):
    allowed_assets = ['Treasury','Loan','Deposit','Cash']
    allowed_liabilities = ['Equity']

    def __init__(self, entry: AccountEntry = AccountEntry(asset={}, liability={})):
        super().__init__('Private', Private.allowed_assets, Private.allowed_liabilities, entry)

        
